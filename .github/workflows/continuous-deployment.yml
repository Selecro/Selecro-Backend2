name: Continuous Deployment

on:
  push:
    branches:
      - dev
      - main
  workflow_dispatch:

jobs:
  run_pull:
    name: Run Pull and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checking out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set deployment variables
        run: |
          if [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            echo "IMAGE=backend-dev" >> $GITHUB_ENV
            echo "DEFAULT_PORT=${{ secrets.DEFAULT_PORT_DEV }}" >> $GITHUB_ENV
            echo "SQL_DATABASE=${{ secrets.SQL_DATABASE_DEV }}" >> $GITHUB_ENV
            echo "VAULT_PORT=${{ secrets.VAULT_PORT_DEV }}" >> $GITHUB_ENV
            echo "UNSEAL_KEY_1=${{ secrets.UNSEAL_KEY_1_DEV }}" >> $GITHUB_ENV
            echo "UNSEAL_KEY_2=${{ secrets.UNSEAL_KEY_2_DEV }}" >> $GITHUB_ENV
            echo "UNSEAL_KEY_3=${{ secrets.UNSEAL_KEY_3_DEV }}" >> $GITHUB_ENV
            echo "ROOT_VAULT_TOKEN=${{ secrets.ROOT_VAULT_TOKEN_DEV }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "IMAGE=backend-main" >> $GITHUB_ENV
            echo "DEFAULT_PORT=${{ secrets.DEFAULT_PORT_MAIN }}" >> $GITHUB_ENV
            echo "SQL_DATABASE=${{ secrets.SQL_DATABASE_MAIN }}" >> $GITHUB_ENV
            echo "VAULT_PORT=${{ secrets.VAULT_PORT_MAIN }}" >> $GITHUB_ENV
            echo "UNSEAL_KEY_1=${{ secrets.UNSEAL_KEY_1_MAIN }}" >> $GITHUB_ENV
            echo "UNSEAL_KEY_2=${{ secrets.UNSEAL_KEY_2_MAIN }}" >> $GITHUB_ENV
            echo "UNSEAL_KEY_3=${{ secrets.UNSEAL_KEY_3_MAIN }}" >> $GITHUB_ENV
            echo "ROOT_VAULT_TOKEN=${{ secrets.ROOT_VAULT_TOKEN_MAIN }}" >> $GITHUB_ENV
          else
            echo "Invalid branch for deployment" && exit 1
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get the short SHA hash of the commit
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and push Docker image
        run: |
          docker build -t selecro/${{ env.IMAGE }}:${{ github.ref_name }}-${{ env.SHORT_SHA }} .
          docker push selecro/${{ env.IMAGE }}:${{ github.ref_name }}-${{ env.SHORT_SHA }}

      - name: Install OpenVPN
        run: |
          sudo apt-get update && sudo apt-get install openvpn -y

      - name: Configure OpenVPN
        run: |
          echo "${{ secrets.OPENVPN_CONFIG }}" > ~/openvpn-config.ovpn
          echo "${{ secrets.OPENVPN_PASSWORD }}" > ~/openvpn.txt

You said:
I am thing to resolve network problem in my ci/cd on github. this part is not giving any logs:
      - name: Check ping
        run: |
          ping ${{ secrets.SERVER_IP }} -n 20
ChatGPT said:

It looks like you're trying to check the network connectivity by pinging a server within your GitHub Actions CI/CD workflow. If you’re not seeing any logs or output from this step, there could be a couple of reasons for that.

Here are a few things to check:
1. Check Ping Command Syntax

The syntax you’re using (-n 20) is for Windows. If your GitHub runner is using a Linux-based environment (which is common), the -n option will not work. You should change it to use the Linux-compatible -c flag, like this:

- name: Check ping
  run: |
    ping ${{ secrets.SERVER_IP }} -c 20

    -n is used on Windows for specifying the number of packets.
    -c is used on Linux/macOS for specifying the number of packets.

2. Ensure the IP is Available in Secrets

Ensure that ${{ secrets.SERVER_IP }} is correctly configured in your GitHub repository secrets. If it's not defined or is incorrect, it won’t work as expected.

You can test this by printing the value to check:

- name: Check SERVER_IP
  run: echo ${{ secrets.SERVER_IP }}

3. Output Logs

By default, the ping command might not output the expected logs if it succeeds. You can add the -v flag (for verbose output) or redirect the output to a file so you can inspect it:

- name: Check ping
  run: |
    ping ${{ secrets.SERVER_IP }} -c 20 -v || echo "Ping failed"

The || echo "Ping failed" ensures you get a message if the ping fails.
4. Check the Network Configuration

If the runner is behind a proxy, firewall, or restricted network, the ping might be blocked. Check whether the network setup for your GitHub Actions runner allows outbound ping requests.
5. Inspecting the Full CI/CD Logs

Make sure you check the full CI/CD logs after the run to see if any errors are being hidden or missed. You might also want to include set -x at the start of your script to see a detailed trace of the commands being executed:

- name: Check ping
  run: |
    set -x
    ping ${{ secrets.SERVER_IP }} -c 20

These changes should help you troubleshoot why you're not getting logs. Let me know how it goes or if you need more help!
3/3
You said:
it is stuck
***[group]Run ping *** -c 20 -v || echo "Ping failed"
ping: sock4.fd: 3 (socktype: SOCK_RAW), sock6.fd: 4 (socktype: SOCK_RAW), hints.ai_family: AF_UNSPEC
ChatGPT said:

If your GitHub Actions workflow is stuck when running ping, it is likely due to one of the following reasons:
Possible Causes and Fixes
1. ICMP (ping) is blocked on GitHub Actions runners

    By default, GitHub-hosted runners do not allow raw socket access, which is required for ping.
    Even if ping starts, it may be blocked due to security policies.

Fix: Instead of using ping, try using curl or nc (netcat) to check connectivity:

- name: Check network connectivity (curl)
  run: curl -v http://${{ secrets.SERVER_IP }} || echo "Connection failed"

Or, if it's an SSH server:

- name: Check network connectivity (netcat)
  run: nc -zv ${{ secrets.SERVER_IP }} 22 || echo "Connection failed"

(Replace 22 with the appropriate port for your service.)
2. Firewall/Network Restrictions

    The server you're trying to reach may not allow ICMP (ping) requests.
    Check if the firewall settings on your target server block ping but allow other types of traffic.

Fix: If you have control over the server, allow ICMP traffic:

sudo iptables -A INPUT -p icmp --icmp-type echo-request -j ACCEPT

3. Runner is stuck waiting for response

    Since GitHub-hosted runners are in a shared cloud environment, networking restrictions can prevent responses.
    The ping command might be waiting indefinitely because of missing a timeout.

Fix: Set a timeout to prevent it from hanging indefinitely:

- name: Check ping (with timeout)
  run: timeout 5 ping -c 5 ${{ secrets.SERVER_IP }} || echo "Ping failed or timed out"

4. Self-hosted Runner Considerations

    If you are using a self-hosted GitHub Actions runner, check whether:
        The machine is allowed to send ICMP packets.
        The machine has a working network connection.

Fix: Run a basic connectivity test directly on the self-hosted runner:

ping -c 4 google.com

Recommended Alternative: Use curl or nc Instead of ping

Since ping might be blocked, replace it with curl or nc to test connectivity.

- name: Check connectivity (curl)
  run: curl -v http://${{ secrets.SERVER_IP }} || echo "Connection failed"

- name: Check connectivity (netcat)
  run: nc -zv ${{ secrets.SERVER_IP }} 22 || echo "Connection failed"

This ensures that your workflow doesn't get stuck while trying to check network connectivity.

Let me know what happens after trying these! 🚀
You said:
***[group]Run nc -zv *** *** || echo "Connection failed"
nc: connect to *** port *** (tcp) failed: Connection timed out
Connection failed
ChatGPT said:

If nc (netcat) is timing out, it means that the GitHub Actions runner cannot reach the target server over the specified port. Here are possible causes and fixes:
1. Check if the Server is Reachable

Before troubleshooting the port, verify if the server itself is accessible. Run:

- name: Check if server is reachable
  run: ping -c 4 ${{ secrets.SERVER_IP }} || echo "Server unreachable"

🔹 If this fails or gets stuck, the server might be down or blocking ICMP requests.
🔹 If this works, but ports are still failing, continue below.
2. Check if the Port is Open on the Server

Run this command on the target server (if you have access):

sudo netstat -tulnp | grep LISTEN

or

sudo ss -tulnp | grep LISTEN

🔹 If your desired port (e.g., 22 for SSH, 80 for HTTP) is not listed, the server is not listening on that port.
🔹 If it is listed, but GitHub Actions cannot connect, it’s likely a firewall or networking issue.
3. Check Firewall and Network Rules

Your server might be blocking incoming connections from unknown sources.
(a) Check UFW (Ubuntu/Debian)

If using UFW (Uncomplicated Firewall):

sudo ufw status

If the port isn’t open, allow it:

sudo ufw allow 22/tcp

(Replace 22 with your actual port.)
(b) Check iptables

sudo iptables -L -n -v

If you see a rule blocking GitHub runners, allow it:

sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT

4. Verify Server IP and Port in GitHub Secrets

Ensure ${{ secrets.SERVER_IP }} is correctly set. To debug:

- name: Debug Server IP
  run: echo "Targeting ${{ secrets.SERVER_IP }}"

Check that:

    The IP is correct.
    The port is correct.

5. Check Cloud Provider Security Rules

If your server is on AWS, Azure, or Google Cloud, Security Groups or firewall rules may be blocking traffic.

    AWS: Modify Security Groups to allow inbound traffic on your port.
    GCP: Check firewall rules and allow traffic.
    Azure: Update NSG (Network Security Group) settings.

6. Use SSH for Deeper Debugging

If your server supports SSH, try:

- name: Test SSH Connection
  run: ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa user@${{ secrets.SERVER_IP }} "echo 'SSH works'"

Summary

✅ If ping fails → The server is down or blocking ICMP.
✅ If netcat fails but ping works → Firewall, security group, or service not running.
✅ If SSH/cURL fail too → Check cloud settings, firewall, and network config.

Try these and let me know what you find! 🚀
You said:
fine, this is my whole code. fix the network inssue:
name: Continuous Deployment

on:
  push:
    branches:
      - dev
      - main
  workflow_dispatch:

jobs:
  run_pull:
    name: Run Pull and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checking out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set deployment variables
        run: |
          if [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            echo "IMAGE=backend-dev" >> $GITHUB_ENV
            echo "DEFAULT_PORT=${{ secrets.DEFAULT_PORT_DEV }}" >> $GITHUB_ENV
            echo "SQL_DATABASE=${{ secrets.SQL_DATABASE_DEV }}" >> $GITHUB_ENV
            echo "VAULT_PORT=${{ secrets.VAULT_PORT_DEV }}" >> $GITHUB_ENV
            echo "UNSEAL_KEY_1=${{ secrets.UNSEAL_KEY_1_DEV }}" >> $GITHUB_ENV
            echo "UNSEAL_KEY_2=${{ secrets.UNSEAL_KEY_2_DEV }}" >> $GITHUB_ENV
            echo "UNSEAL_KEY_3=${{ secrets.UNSEAL_KEY_3_DEV }}" >> $GITHUB_ENV
            echo "ROOT_VAULT_TOKEN=${{ secrets.ROOT_VAULT_TOKEN_DEV }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "IMAGE=backend-main" >> $GITHUB_ENV
            echo "DEFAULT_PORT=${{ secrets.DEFAULT_PORT_MAIN }}" >> $GITHUB_ENV
            echo "SQL_DATABASE=${{ secrets.SQL_DATABASE_MAIN }}" >> $GITHUB_ENV
            echo "VAULT_PORT=${{ secrets.VAULT_PORT_MAIN }}" >> $GITHUB_ENV
            echo "UNSEAL_KEY_1=${{ secrets.UNSEAL_KEY_1_MAIN }}" >> $GITHUB_ENV
            echo "UNSEAL_KEY_2=${{ secrets.UNSEAL_KEY_2_MAIN }}" >> $GITHUB_ENV
            echo "UNSEAL_KEY_3=${{ secrets.UNSEAL_KEY_3_MAIN }}" >> $GITHUB_ENV
            echo "ROOT_VAULT_TOKEN=${{ secrets.ROOT_VAULT_TOKEN_MAIN }}" >> $GITHUB_ENV
          else
            echo "Invalid branch for deployment" && exit 1
          fi
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get the short SHA hash of the commit
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Build and push Docker image
        run: |
          docker build -t selecro/${{ env.IMAGE }}:${{ github.ref_name }}-${{ env.SHORT_SHA }} .
          docker push selecro/${{ env.IMAGE }}:${{ github.ref_name }}-${{ env.SHORT_SHA }}
      - name: Install OpenVPN
        run: |
          sudo apt-get update && sudo apt-get install openvpn -y
      - name: Configure OpenVPN
        run: |
          echo "${{ secrets.OPENVPN_CONFIG }}" > ~/openvpn-config.ovpn
          echo "${{ secrets.OPENVPN_PASSWORD }}" > ~/openvpn.txt
      - name: Connect to OpenVPN
        run: |
          sudo nohup openvpn --config ~/openvpn-config.ovpn --auth-nocache --askpass ~/openvpn.txt > /dev/null 2>&1 &
      - name: Check network connectivity (netcat)
        run: nc -zv ${{ secrets.SERVER_IP }} ${{ secrets.SSH_PORT }} || echo "Connection failed"
      - name: SSH into Your Server and Deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker login || true && \
            docker pull selecro/${{ env.IMAGE }}:${{ github.ref_name }}-${{ env.SHORT_SHA }} && \
            docker ps -a | grep ${{ env.IMAGE }} && docker stop ${{ env.IMAGE }} || true && \
            docker ps -a | grep ${{ env.IMAGE }} && docker rm ${{ env.IMAGE }} || true && \
            docker run \
            -e DEFAULT_HOST="${{ secrets.DEFAULT_HOST }}" \
            -e DEFAULT_PORT="${{ env.DEFAULT_PORT }}" \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            -e JWT_SECRET_EMAIL="${{ secrets.JWT_SECRET_EMAIL }}" \
            -e JWT_SECRET_SIGNUP="${{ secrets.JWT_SECRET_SIGNUP }}" \
            -e SQL_HOST="${{ secrets.SQL_HOST }}" \
            -e SQL_PORT="${{ secrets.SQL_PORT }}" \
            -e SQL_USER="${{ secrets.SQL_USER }}" \
            -e SQL_PASSWORD="${{ secrets.SQL_PASSWORD }}" \
            -e SQL_DATABASE="${{ env.SQL_DATABASE }}" \
            -e EMAIL_HOST="${{ secrets.EMAIL_HOST }}" \
            -e EMAIL_PORT="${{ secrets.EMAIL_PORT }}" \
            -e EMAIL_USER="${{ secrets.EMAIL_USER }}" \
            -e EMAIL_PASSWORD="${{ secrets.EMAIL_PASSWORD }}" \
            -e VAULT_URL="${{ secrets.VAULT_URL }}" \
            -e VAULT_PORT="${{ env.VAULT_PORT }}" \
            -e UNSEAL_KEY_1="${{ env.UNSEAL_KEY_1 }}" \
            -e UNSEAL_KEY_2="${{ env.UNSEAL_KEY_2 }}" \
            -e UNSEAL_KEY_3="${{ env.UNSEAL_KEY_3 }}" \
            -e ROOT_VAULT_TOKEN="${{ env.ROOT_VAULT_TOKEN }}" \
            -e IMGUR_CLIENT_ID="${{ secrets.IMGUR_CLIENT_ID }}" \
            -e INSTRUCTION_KEY_PREMIUM="${{ secrets.INSTRUCTION_KEY_PREMIUM }}" \
            -e INSTRUCTION_KEY_PREMIUM_PERMISSIONS="${{ secrets.INSTRUCTION_KEY_PREMIUM_PERMISSIONS }}" \
            --name ${{ env.IMAGE }} -d -p ${{ env.DEFAULT_PORT }}:${{ env.DEFAULT_PORT }} \
            selecro/${{ env.IMAGE }}:${{ github.ref_name }}-${{ env.SHORT_SHA }} && \
            docker update --restart unless-stopped ${{ env.IMAGE }} && exit
      - name: Close OpenVPN Connection
        run: |
          sudo pkill openvpn
      - name: Clean up SSH Configuration
        run: |
          rm -rf ~/.ssh
ChatGPT said:

Your GitHub Actions workflow has a network issue likely due to the OpenVPN connection not being established properly. Here are key fixes and improvements to make sure it works:
🔍 Identified Problems

    OpenVPN is not running correctly
        The VPN setup does not verify if the connection was successful.
        It redirects output to /dev/null, making debugging difficult.

    Network connectivity check (nc -zv) is failing
        If the VPN is not connected, GitHub-hosted runners cannot reach your private server.

    SSH might be failing due to VPN issues
        If ssh-action fails, it likely means the VPN did not establish correctly.

✅ Fixed Workflow

name: Continuous Deployment

on:
  push:
    branches:
      - dev
      - main
  workflow_dispatch:

jobs:
  run_pull:
    name: Run Pull and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checking out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set deployment variables
        run: |
          if [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            echo "IMAGE=backend-dev" >> $GITHUB_ENV
            echo "DEFAULT_PORT=${{ secrets.DEFAULT_PORT_DEV }}" >> $GITHUB_ENV
            echo "SQL_DATABASE=${{ secrets.SQL_DATABASE_DEV }}" >> $GITHUB_ENV
            echo "VAULT_PORT=${{ secrets.VAULT_PORT_DEV }}" >> $GITHUB_ENV
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "IMAGE=backend-main" >> $GITHUB_ENV
            echo "DEFAULT_PORT=${{ secrets.DEFAULT_PORT_MAIN }}" >> $GITHUB_ENV
            echo "SQL_DATABASE=${{ secrets.SQL_DATABASE_MAIN }}" >> $GITHUB_ENV
            echo "VAULT_PORT=${{ secrets.VAULT_PORT_MAIN }}" >> $GITHUB_ENV
          else
            echo "Invalid branch for deployment" && exit 1
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get the short SHA hash of the commit
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and push Docker image
        run: |
          docker build -t selecro/${{ env.IMAGE }}:${{ github.ref_name }}-${{ env.SHORT_SHA }} .
          docker push selecro/${{ env.IMAGE }}:${{ github.ref_name }}-${{ env.SHORT_SHA }}

      - name: Install OpenVPN
        run: sudo apt-get update && sudo apt-get install openvpn -y

      - name: Configure OpenVPN
        run: |
          echo "${{ secrets.OPENVPN_CONFIG }}" > ~/openvpn-config.ovpn
          echo "${{ secrets.OPENVPN_PASSWORD }}" > ~/openvpn.txt

      - name: Connect to OpenVPN (Proper Logging & Wait)
        run: |
          sudo nohup openvpn --config ~/openvpn-config.ovpn --auth-nocache --askpass ~/openvpn.txt > openvpn.log 2>&1 &
          sleep 15
          tail -n 20 openvpn.log

      - name: Verify VPN Connection
        run: |
          if ! ip a | grep "tun0"; then
            echo "VPN connection failed!"
            cat openvpn.log
            exit 1
          fi

      - name: Check network connectivity (netcat)
        run: |
          nc -zv ${{ secrets.SERVER_IP }} ${{ secrets.SSH_PORT }} || (echo "Connection failed" && exit 1)

      - name: SSH into Your Server and Deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker login || true && \
            docker pull selecro/${{ env.IMAGE }}:${{ github.ref_name }}-${{ env.SHORT_SHA }} && \
            docker ps -a | grep ${{ env.IMAGE }} && docker stop ${{ env.IMAGE }} || true && \
            docker ps -a | grep ${{ env.IMAGE }} && docker rm ${{ env.IMAGE }} || true && \
            docker run \
            -e DEFAULT_HOST="${{ secrets.DEFAULT_HOST }}" \
            -e DEFAULT_PORT="${{ env.DEFAULT_PORT }}" \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            -e JWT_SECRET_EMAIL="${{ secrets.JWT_SECRET_EMAIL }}" \
            -e JWT_SECRET_SIGNUP="${{ secrets.JWT_SECRET_SIGNUP }}" \
            -e SQL_HOST="${{ secrets.SQL_HOST }}" \
            -e SQL_PORT="${{ secrets.SQL_PORT }}" \
            -e SQL_USER="${{ secrets.SQL_USER }}" \
            -e SQL_PASSWORD="${{ secrets.SQL_PASSWORD }}" \
            -e SQL_DATABASE="${{ env.SQL_DATABASE }}" \
            -e EMAIL_HOST="${{ secrets.EMAIL_HOST }}" \
            -e EMAIL_PORT="${{ secrets.EMAIL_PORT }}" \
            -e EMAIL_USER="${{ secrets.EMAIL_USER }}" \
            -e EMAIL_PASSWORD="${{ secrets.EMAIL_PASSWORD }}" \
            -e VAULT_URL="${{ secrets.VAULT_URL }}" \
            -e VAULT_PORT="${{ env.VAULT_PORT }}" \
            -e UNSEAL_KEY_1="${{ env.UNSEAL_KEY_1 }}" \
            -e UNSEAL_KEY_2="${{ env.UNSEAL_KEY_2 }}" \
            -e UNSEAL_KEY_3="${{ env.UNSEAL_KEY_3 }}" \
            -e ROOT_VAULT_TOKEN="${{ env.ROOT_VAULT_TOKEN }}" \
            -e IMGUR_CLIENT_ID="${{ secrets.IMGUR_CLIENT_ID }}" \
            -e INSTRUCTION_KEY_PREMIUM="${{ secrets.INSTRUCTION_KEY_PREMIUM }}" \
            -e INSTRUCTION_KEY_PREMIUM_PERMISSIONS="${{ secrets.INSTRUCTION_KEY_PREMIUM_PERMISSIONS }}" \
            --name ${{ env.IMAGE }} -d -p ${{ env.DEFAULT_PORT }}:${{ env.DEFAULT_PORT }} \
            selecro/${{ env.IMAGE }}:${{ github.ref_name }}-${{ env.SHORT_SHA }} && \
            docker update --restart unless-stopped ${{ env.IMAGE }} && exit

      - name: Close OpenVPN Connection
        run: |
          sudo pkill openvpn

      - name: Clean up SSH Configuration
        run: |
          rm -rf ~/.ssh
